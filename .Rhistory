#
#   nrow(unique(trips[,c("service_id", "trip_id")]))
#
# trip_stop <- left_join(trips, stop_route)
#
#
# stop_route <- stops %>%
#   st_drop_geometry() %>%
#   select(stop_id) %>%
#   left_join(stop_trip, by = )
###
# # add stop location to stop times - takes too long
#   stop_times <- left_join(stop_times, stops, by = "stop_id") %>%
#   st_as_sf()
stop_times <- stop_times %>%
group_by(trip_id) %>%
nest()
stop_times <- left_join(stop_times, trips, by = "trip_id")
stop_times <- left_join(stop_times, routes, by = "route_id" )
bolton_routes <- routes %>%
filter(str_detect(route_long_name, "Bolton"))
stop_times_short <- stop_times %>%
filter(route_id %in% bolton_routes$route_id)
stop_times_supershort <- stop_times_short[c(25, 123, 500, 780, 1000, 2600, 5345, 6341),]
stop_times_supershort <- unnest(stop_times_supershort) %>%
left_join(stops, by = "stop_id") %>%
st_as_sf()
stop_times_supershort[1, "geometry"]
stop_times_supershort2 <- stop_times_supershort %>%
group_by(trip_id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") %>%
st_coordinates() %>%
as.data.frame() %>%
plot()
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red")
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addCircleMarkers(weight = 2, color = "red")
plot(st_geometry(stop_times_supershort2))
stop_times_supershort2 <- stop_times_supershort %>%
group_by(trip_id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
plot(st_geometry(stop_times_supershort2))
View(stop_times_supershort2)
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red")
# this works!!!
stop_times_supershort2 <- stop_times_supershort %>%
group_by(trip_id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") %>%
left_join(stop_times_supershort, by = "trip_id")
# this works!!!
stop_times_supershort2 <- stop_times_supershort %>%
group_by(trip_id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") %>%
left_join(st_drop_geometry(stop_times_supershort), by = "trip_id")
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red", popup = ~route_short_name)
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = ~ trip_id, popup = ~route_short_name)
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = trip_id, popup = ~route_short_name)
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red", popup = ~route_short_name)
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red", popup = ~(glue({route_short_name}<br>{route_long_name})))
##
leaflet(stop_times_supershort2) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red", popup = ~(glue("{route_short_name}<br>{route_long_name}")))
##
stop_times_supershort2 %>%
filter(route_short_name == "500") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolylines(weight = 2, color = "red", popup = ~(glue("{route_short_name}<br>{route_long_name}")))
library(readr)
library(leaflet)
library(leaflet.extras)
library(sf)
library(glue)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
# stops
stops <- read_csv("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AADMaJKBTuHlp5jdXBmgRT8ya/gtdf-out/stops.txt?dl=1") %>%
st_as_sf(coords = c("stop_lon", "stop_lat")) %>%
st_set_crs(4326) %>%
select(-stop_code, -stop_url) # drop code & url just seem to be for text for times
# plot(st_geometry(stops))
# routes
routes <- read_csv("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AABZlyrwbd1Wu_gHV0QowUQfa/gtdf-out/routes.txt?dl=1")
# trips - big file
trips <- read_csv("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AABPdBmSL-T5Q6u72Ul5HrRxa/gtdf-out/trips.txt?dl=1")
# stop times - big file 8MB
stop_times <- read_csv("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AADqaMDXl8jsJJSUongzQiwqa/gtdf-out/stop_times.txt?dl=1")
# stop_times <- left_join(stop_times, trips, by = "trip_id")
stop_times <- stop_times %>%
group_by(trip_id) %>%
nest()
stop_times <- left_join(stop_times, trips, by = "trip_id")
stop_times <- left_join(stop_times, routes, by = "route_id" )
#   stop_times <- stop_times %>%
#     nest(-route_id, -service_id, -trip_headsign)
#   # service_id seems to be a code version of route_id, ie a combination of route number & operator
# stop_times <- unnest(stop_times)
# make a shorter dataset
bolton_routes <- routes %>%
filter(str_detect(route_long_name, "Bolton"))
stop_times_short <- stop_times %>%
filter(route_id %in% bolton_routes$route_id)
stop_times_supershort <- stop_times_short[c(25, 123, 500, 780, 1000, 2600, 5345, 6341),]
# add stop geocode
stop_times_supershort <- unnest(stop_times_supershort) %>%
left_join(stops, by = "stop_id") %>%
st_as_sf()
# this works!!!
stop_times_supershort2 <- stop_times_supershort %>%
group_by(trip_id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") %>%
left_join(st_drop_geometry(stop_times_supershort), by = "trip_id")
View(stop_times_short)
stop_times_short %>%
group_by(service_id, route_id) %>%
summarise(n())
stop_times_short %>%
group_by(service_id, route_id) %>%
summarise(count(route_id))
stop_times_short %>%
summarise(count(route_id))
stop_times_short %>%
count(route_id)
summarise(nrow(count(route_id))
stop_times_short %>%
summarise(nrow(count(route_id)))
stop_times_short %>%
nrow(count(route_id))
stop_times_short %>%
count(route_id)
stop_times_short %>%
count(route_id) %>%
nrow()
stop_times_short %>%
count(service_id) %>%
nrow()
stop_times_short %>%
group_by(route_id, service_id) %>%
summarise(n()) %>%
View()
stop_times_short %>%
group_by(route_id, service_id, route_long_name) %>%
summarise(n()) %>%
View()
stop_times_short %>%
filter(service_id %in% c("Serv003324", "Serv003325", "Serv003326", "Serv003327") &
trip_id == min(trip_id))  %>%
View()
stop_times_short %>%
group_by(service_id) %>%
filter(service_id %in% c("Serv003324", "Serv003325", "Serv003326", "Serv003327") &
trip_id == min(trip_id))  %>%
View()
View(.[[2]][[1]])
View(.[[2]][[2]])
View(.[[2]][[3]])
View(.[[2]][[4]])
stop_times_short %>%
group_by(service_id) %>%
filter(service_id %in% c("Serv003324", "Serv003325", "Serv003326", "Serv003327") &
trip_id == min(trip_id))  %>%
unnest() %>%
View()
stop_times_short %>%
group_by(service_id) %>%
filter(service_id %in% c("Serv003324", "Serv003325", "Serv003326", "Serv003327") &
trip_id == min(trip_id))  %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
View()
View(trips)
View(stop_times)
# stop times - big file 8MB
stop_times <- read_csv("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AADqaMDXl8jsJJSUongzQiwqa/gtdf-out/stop_times.txt?dl=1")
stop_times <- stop_times %>%
group_by(trip_id) %>%
nest() %>%
left_join(trips, by = "trip_id") %>%
left_join(routes, by = "route_id")
stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id))
stop_times <- stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id))
View(stop_times[[2]][[1]])
View(stop_times[[2]][[14]])
View(stop_times[[2]][[14]])
stop_times <- stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id)) %>%
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf() %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf()
View(stop_times1)
View(stop_times1)
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf()
plot(st_geometry(stop_times1))
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf() %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
stop_times <- stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id)) %>%
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf() %>%
group_by(trip_id) %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
class(stop_times1$geometry)
stop_times <- stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id)) %>%
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf() %>%
group_by(trip_id) %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
st_as_sf() %>%
group_by(trip_id)
class(stop_times1$geometry)
stop_times <- stop_times %>%
group_by(route_id) %>%
filter(trip_id == min(trip_id)) %>%
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
#st_as_sf() %>%
group_by(trip_id) %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
stop_times1 <- stop_times %>%
unnest() %>%
left_join(stops, by = "stop_id") %>%
#st_as_sf() %>%
group_by(trip_id) %>%
nest(arrival_time, departure_time, stop_id, stop_sequence, pickup_type, drop_off_type)
View(stop_times1[[2]][[1]])
class(stop_times1)
class(stop_times1$geometry)
class(stop_times1["data"]$geometry)
stop_times1[[1]]
stop_times1[[1,2]]
stop_times1[1,2]
stop_times1[1,2]$geometry
class(stop_times$data$geometry)
class(stop_times@data$geometry)
class(stop_times$data$geometry)
View(stop_times1[[2]][[1]])
class(stop_times1$data$arrival_time)
stop_times1$data$arrival_time
# fares. Not all funcitons will read from a web link. Seems to have a hidden sheet...
diamond_fare1 <- read.xlsx("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AAAoGQzqPcROfzqsmHeVIFCxa/Fare%20tables/Diamond%20Bus/715_20190206205722.xlsx?dl=1",
sheet = 2, startRow = 2)
library(readr)
library(leaflet)
library(leaflet.extras)
library(sf)
library(glue)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(readxl)
library(openxlsx)
library(otuSummary)
# fares. Not all funcitons will read from a web link. Seems to have a hidden sheet...
diamond_fare1 <- read.xlsx("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AAAoGQzqPcROfzqsmHeVIFCxa/Fare%20tables/Diamond%20Bus/715_20190206205722.xlsx?dl=1",
sheet = 2, startRow = 2)
# doesn't work. lower triangle matrix
# diamond_fare2 <- matrixConvert(diamond_fare1)
lowerTriangle(diamond_fare1) = upperTriangle(diamond_fare1, byrow=TRUE)
library(gdata)
install.packages("gdata")
library(gdata)
# doesn't work. lower triangle matrix
# diamond_fare2 <- matrixConvert(diamond_fare1)
lowerTriangle(diamond_fare1) = upperTriangle(diamond_fare1, byrow=TRUE)
View(diamond_fare1)
varname <- diamond_fare1
numrows <- nrow(varname)
numcols <- ncol(varname)
stop_names <- vector(mode='character',length=numcols)
stop_names[i] <- varname[i,i]
stop_names <- for(i in 1:length(stop_names)) {
stop_names[i] <- varname[i,i]
}
1:length(stop_names)
stop_names <- for(i in 1:numcols) {
stop_names[i] <- varname[i,i]
}
varname[1,1]
stop_names <- for(i in 1:numcols) {
stop_names[i] <- varname[i,i]
}
stop_names[1] <- varname[1,1]
# fares. Not all funcitons will read from a web link. Seems to have a hidden sheet...
diamond_fare1 <- read.xlsx("https://www.dropbox.com/sh/4djlyzcdo0ytpcf/AAAoGQzqPcROfzqsmHeVIFCxa/Fare%20tables/Diamond%20Bus/715_20190206205722.xlsx?dl=1",
sheet = 2, startRow = 1)
stop_names[1] <- varname[1,1]
varname[1,1]
View(diamond_fare1)
diamond_fare1[1,1]
stop_names[1] <- varname[1,1]
stop_names <- vector(mode='character',length=numcols)
stop_names[1] <- varname[1,1]
varname[1,1]
varname <- diamond_fare1
stop_names[1] <- varname[1,1]
for(i in 1:numcols) {
stop_names[i] <- varname[i,i]
}
stop_names <- vector(mode='character',length=numcols)
stop_names <- for(i in 1:numcols) {
stop_names[i] <- varname[i,i]
}
for(i in 1:numcols) {
stop_names[i] <- varname[i,i]
}
View(diamond_fare1)
numrows <- nrow(varname-1)
numcols <- ncol(varname)
stops_melted <- data.frame(from = character, to = character, price = numeric)
nrow(stops_melted) <- numrows*numcols/2
nrow(stop_names)
nrow(diamond_fare1)
setnames(stops_melted) <- stop_names
colnames(stops_melted) <- stop_names
stops_melted <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("from", "to", "price"))
View(stops_melted)
stops_melted <- data.frame(matrix(ncol = 3, nrow = 2)) %>%
setNames(c("from", "to", "price"))
View(stops_melted)
rm(stops_melted)
stops_melted <- data.frame(matrix(ncol = 3, nrow = numrows*numcols/2)) %>%
setNames(c("from", "to", "price"))
varname <- varname[-1,]
View(varname)
names(varname) <- stop_names
row.names(varname) <- stop_names
View(varname)
row.names(varname)
row.names(varname) <- stop_names
nrow(varname)
row.names(varname) <- stop_names[2:length(stop_names)]
View(varname)
varname <- as.numeric(varname)
View(varname)
class(varname[1])
class(varname[2,2])
varname <- data.matrix(varname)
View(varname)
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
View(stops_melted)
View(diamond_fare1)
stops_melted$from <- row.names(stops_melted)[stops_melted$row]
for(i in 1:nrow(stops_melted)) {
stops_melted$from[i] <- row.names(stops_melted)[i]
stops_melted$to[i] <- names(stops_melted)[i]
}
stops_melted[i, "from"] <- row.names(stops_melted)[i]
View(stops_melted)
stops_melted$from <- character()
View(stops_melted)
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
View(stops_melted)
stops_melted$from <- as.character()
stops_melted[, "from"] <- NA
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
stops_melted[, "from"] <- NA
View(stops_melted)
stops_melted[, 4:5] <- NA
stops_melted[i, "from"] <- row.names(stops_melted)[i]
for(i in 1:nrow(stops_melted, "from", "to"))
stops_melted <- cbind(stops_melted, "from", "to")
stops_melted <- cbind(c(stops_melted, "from", "to"))
View(stops_melted)
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
cbind(stops_melted, names(stops_melted)[i])
stops_meltedL<- cbind(stops_melted, names(stops_melted)[i])
stops_melted <- cbind(stops_melted, names(stops_melted)[i])
View(stops_melted)
rownames(stops_melted) <- c()
names(stops_melted)[3] <- "price"
names(stops_melted)
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
col.names(stops_melted)[3] <- "price"
colnames(stops_melted)[3] <- "price"
rm(stops_meltedL)
i <- 3
row.names(varname[i,1])
row.names(varname)[i]
# get row / col indices into to / from names
# stops_melted <- cbind(c(stops_melted, "from", "to"))
#
for(i in 1:nrow(stops_melted)){
stops_melted[i,1] <- row.names(varname)[i]
stops_melted[i,2] <- col.names(varname)[i]
}
stops_melted[i,2] <- colnames(varname)[i]
View(stops_melted)
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
colnames(stops_melted)[3] <- "price"
View(stops_melted)
# get row / col indices into to / from names
# stops_melted <- cbind(c(stops_melted, "from", "to"))
#
for(i in 1:nrow(stops_melted)){
stops_melted[i,1] <- row.names(varname)[i]
stops_melted[i,2] <- colnames(varname)[i]
}
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
colnames(stops_melted)[3] <- "price"
# get row / col indices into to / from names
# stops_melted <- cbind(c(stops_melted, "from", "to"))
#
for(i in 1:nrow(stops_melted)){
stops_melted[i,1] <- row.names(varname)[stops_melted[i,1]]
stops_melted[i,2] <- colnames(varname)[stops_melted[i,2]]
}
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
colnames(stops_melted)[3] <- "price"
# get row / col indices into to / from names
# stops_melted <- cbind(c(stops_melted, "from", "to"))
#
for(i in 1:nrow(stops_melted)){
stops_melted[i,4] <- row.names(varname)[stops_melted[i,1]]
stops_melted[i,5] <- colnames(varname)[stops_melted[i,2]]
}
stops_melted$from <- NA
stops_melted$to <- NA
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
colnames(stops_melted)[3] <- "price"
stops_melted[,"from"] <- NA
stops_melted[,"to"] <- NA
stops_melted[,from] <- NA
stops_melted[,4] <- NA
class(stops_melted)
stops_melted <- as.data.frame(stops_melted)
stops_melted[,"to"] <- NA
stops_melted[,"from"] <- NA
# get row / col indices into to / from names
# stops_melted <- cbind(c(stops_melted, "from", "to"))
#
for(i in 1:nrow(stops_melted)){
stops_melted[i,4] <- row.names(varname)[stops_melted[i,1]]
stops_melted[i,5] <- colnames(varname)[stops_melted[i,2]]
}
stops_melted <- cbind(which(!is.na(varname),arr.ind = TRUE),na.omit(as.vector(varname)))
rownames(stops_melted) <- c()
colnames(stops_melted)[3] <- "price"
stops_melted <- as.data.frame(stops_melted)
stops_melted[,"from"] <- NA
stops_melted[,"to"] <- NA
# get row / col indices into to / from names
for(i in 1:nrow(stops_melted)){
stops_melted[i,4] <- row.names(varname)[stops_melted[i,1]]
stops_melted[i,5] <- colnames(varname)[stops_melted[i,2]]
}
stops_melted <- stops_melted %>%
select(from, to, price)
